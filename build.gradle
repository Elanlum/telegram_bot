plugins {
    id 'org.springframework.boot' version '2.1.0.RELEASE'
    id 'info.solidsoft.pitest' version '1.3.0'
    id 'com.google.cloud.tools.jib' version '1.0.0'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'com.google.cloud.tools.jib'

group = 'com.elanlum.ecs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_10

repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/michaelklishin/maven/"
    }
}

jib {
    from {
        image = 'openjdk:11-slim'
    }
    to {
        image = "com.elanlum.ecs:0.0.1-SNAPSHOT"
    }
}

pitest {
    pitestVersion '1.4.3'
    testPlugin = 'junit5'
    targetClasses = ['com.elanlum.ecs.*']
    testSourceSets = [sourceSets.test]
    excludedClasses = ['com.elanlum.ecs.**.config.**', 'com.elanlum.ecs.EcsApplication**']
    excludedTestClasses = ['com.elanlum.ecs.**IntegrationTest', 'com.elanlum.ecs.**.*IntegrationTest']
    mainSourceSets = [sourceSets.main]
    coverageThreshold = 90
    outputFormats = ['HTML']

}

jacoco {
    toolVersion '0.8.2'
}


bootJar {
    mainClassName = 'com.elanlum.ecs.EcsApplication'
}

checkstyle {
    showViolations = true
    toolVersion '8.12'
    maxWarnings = 0
    maxErrors = 0
    configFile file("etc/style/google_checks.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

test {
    useJUnitPlatform {
        includeTags 'unit-tests'
    }
}

task integrationTests(type: Test)
configure(integrationTests) {
    group = 'verification'
    description = 'Runs the integration tests'
}

integrationTests {
    useJUnitPlatform {
        includeTags 'integration-test'
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/com/elanlum/ecs/**/config/**', '**/com/elanlum/ecs/EcsApplication**'])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            excludes = ['com.elanlum.ecs.**.config**', 'com.elanlum.ecs']
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.9
            }
        }
    }
}

dependencies {
    compile('javax.xml.bind:jaxb-api')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('com.graphhopper:graphhopper-reader-osm:0.11.0')
    compile('org.apache.commons:commons-collections4:4.1')
    compile('org.telegram:telegrambots:4.1')
    compile('com.google.code.findbugs:jsr305:3.0.2')
    compile('org.quartz-scheduler:quartz:2.2.1')
    compile("com.novemberain:quartz-mongodb:2.1.0")

    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit'
        exclude group: "com.vaadin.external.google", module:"android-json"
    }
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testCompile('org.junit.jupiter:junit-jupiter-params')
    testCompile('org.hamcrest:java-hamcrest:2.0.0.0')
    testCompile('org.mockito:mockito-core')
    testCompile('org.mockito:mockito-junit-jupiter')
    testCompile('org.pitest:pitest-junit5-plugin:0.8')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    compileOnly('org.projectlombok:lombok')
}
